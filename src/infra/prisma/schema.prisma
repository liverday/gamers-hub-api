datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Country {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  iso_code String  @db.VarChar
  flag_url String? @db.VarChar

  @@map("countries")
}

model File {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  file_name  String     @db.VarChar
  path       String     @db.VarChar
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  post_files PostFile[]

  @@map("files")
}

model Game {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String     @db.VarChar
  description String     @db.VarChar
  game_tags   GameTag[]
  user_games  UserGame[]

  @@map("games")
}

model GameTag {
  id      String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  game_id String  @db.Uuid
  tag     String? @db.VarChar
  games   Game    @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("game_tags")
}

model PostCommentLike {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  comment_id    String      @db.Uuid
  user_id       String      @db.Uuid
  post_comments PostComment @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         User        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("post_comment_likes")
}

model PostComment {
  id                 String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id            String            @db.Uuid
  user_id            String            @db.Uuid
  created_at         DateTime          @default(now()) @db.Timestamp(6)
  updated_at         DateTime          @default(now()) @db.Timestamp(6)
  posts              Post              @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              User              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_comment_likes PostCommentLike[]

  @@map("post_comments")
}

model PostFile {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id String @db.Uuid
  file_id String @db.Uuid
  files   File   @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts   Post   @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("post_files")
}

model PostLike {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id String @db.Uuid
  user_id String @db.Uuid
  posts   Post   @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("post_likes")
}

model Post {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String        @db.Uuid
  title         String        @db.VarChar(100)
  content       String        @db.VarChar(300)
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  user          User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_comments PostComment[]
  post_files    PostFile[]
  post_likes    PostLike[]

  @@map("posts")
}

model Profile {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name String   @db.VarChar
  last_name  String   @db.VarChar
  gender     String   @db.Char(1)
  bio        String?  @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  users      User[]

  @@map("profiles")
}

model UserFollower {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String @db.Uuid
  follower_id String @db.Uuid

  @@map("user_followers")
}

model UserGame {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id String @db.Uuid
  game_id String @db.Uuid
  games   Game   @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_games")
}

model User {
  id                 String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profile_id         String            @db.Uuid
  email              String            @unique @db.VarChar(80)
  username           String            @unique @db.VarChar(50)
  password           String            @db.VarChar
  is_active          Boolean           @default(true)
  created_at         DateTime          @default(now()) @db.Timestamp(6)
  updated_at         DateTime          @default(now()) @db.Timestamp(6)
  profile            Profile           @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_comment_likes PostCommentLike[]
  post_comments      PostComment[]
  post_likes         PostLike[]
  posts              Post[]
  user_games         UserGame[]

  @@map("users")
}
